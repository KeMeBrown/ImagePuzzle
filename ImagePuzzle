<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">

<head>

    <title>Image Puzzle</title>

    <link href="css/style.css" rel="stylesheet" />

    <link href="css/image-puzzle.css" rel="stylesheet" />

    <script src="js/jquery-2.1.1.min.js"></script>

    <script src="js/jquery-ui.js"></script>

    <script src="js/image-puzzle.js"></script>

</head>

<body>

    <div id="collage">

        <h2>Image Puzzle</h2>

        <hr />

        <div id="playPanel" style="padding:5px;display:none;">

           

            <div style="display:inline-block; margin:auto; width:95%; vertical-align:top;">

                <ul id="sortable" class="sortable"></ul>

                <div id="actualImageBox">

                    <img id="actualImage" />

                    <div>Re-arrange to create a picture like this.</div>

                   

                    <div>

                        <button id="btnRule" type="button" class="btn" onclick="rules();">Rules</button>

                        <button id="newPhoto" type="button" class="btn">Another Photo</button>

                        <button id="btnReplay" type="button" class="btn" onclick="about();">About</button>

                    </div>

                </div>

            </div>

        </div>

        <div id="gameOver" style="display:none;">

            <div style="background-color: #fc9e9e; padding: 5px 10px 20px 10px; text-align: center; ">

                <div>

                    <button type="button" onclick="window.location.reload(true);">Play Again</button>

                </div>

            </div>

        </div>

        <script>

        var images = [

                { src: 'images/london-bridge.jpg', title: 'London Bridge' },

                { src: 'images/lotus-temple.jpg', title: 'Lotus Temple' },

                { src: 'images/qutub-minar.jpg', title: 'Qutub Minar' },

                { src: 'images/statue-of-liberty.jpg', title: 'Statue Of Liberty' },

                { src: 'images/taj-mahal.jpg', title: 'Taj Mahal' }

            ];

            $(function () {

                var gridSize = $('#levelPanel :radio:checked').val();

                imagePuzzle.startGame(images, gridSize);

                $('#newPhoto').click(function () {

                    var gridSize = $('#levelPanel :radio:checked').val(); // Take the updated gridSize from UI.

                    imagePuzzle.startGame(images, gridSize);

                });

                $('#levelPanel :radio').change(function (e) {

                    var gridSize = $(this).val();

                    imagePuzzle.startGame(images, gridSize);

                });

            });

            function rules() {

                alert('Re arrange the image parts in a way that it correctly forms the picture. \nThe no. of steps taken will be counted.');

            }

        </script>

    </div>

</body>

</html>

#collage hr{

    border:none;

    border-top:2px solid #f5f2f2;

    height:1px;

}

#collage #playPanel {

    background-color:#c2defc;

    padding:10px 0px;

    margin: 10px auto;

    max-width:800px;

    width:95%;

}

#collage #actualImageBox {

    display: inline-block;

    font-size:0.8em;

    margin: 10px 10px;

    vertical-align: top;

    width:280px;

}

#collage #stepBox, #collage #timeBox {

    display:inline-block;

    width:48%;

}

#collage #stepBox div {

    background-color:#c2defc;

    display:inline-block;

    padding:1px 4px;

    margin: 0px auto;

    max-width:800px;

}

#collage img#actualImage{

    border:2px solid #a46;

    height:280px;

    width:280px;

}

#collage #sortable {

    border:2px solid #a46;

    list-style-type: none;

    display: inline-block;

    margin: 10px;

    padding: 0;

    width: 400px;

}

    #collage #sortable li {

        background-size: 400% 400%;

        border: none;

        cursor: pointer;

        margin: 0;

        padding: 0;

        float: left;

        width: 100px;

        height: 100px;

    }

#collage button {

    background-color:#f5f2f2;

    border:1px solid #cce;

    display: inline;

    font-size: 14px;

    height: auto;

    width: auto;

    padding: 3px 8px;

}

body {

    font-family: 'Segoe UI', Calibri, Arial;

    margin:0;

}

h2{

    font-weight:normal;

    text-align:center;

}

h3{

    font-weight:normal;

    margin:3px 0px;

    text-align:center;

}

var timerFunction;

var imagePuzzle = {

    stepCount: 0,

    startTime: new Date().getTime(),

    startGame: function (images, gridSize) {

        this.setImage(images, gridSize);

        $('#playPanel').show();

        $('#sortable').randomize();

        this.enableSwapping('#sortable li');

        this.stepCount = 0;

        this.startTime = new Date().getTime();

        this.tick();

    },

    tick: function () {

        var now = new Date().getTime();

        var elapsedTime = parseInt((now - imagePuzzle.startTime) / 1000, 10);

        $('#timerPanel').text(elapsedTime);

        timerFunction = setTimeout(imagePuzzle.tick, 1000);

    },

    enableSwapping: function (elem) {

        $(elem).draggable({

            snap: '#droppable',

            snapMode: 'outer',

            revert: "invalid",

            helper: "clone"

        });

        $(elem).droppable({

            drop: function (event, ui) {

                var $dragElem = $(ui.draggable).clone().replaceAll(this);

                $(this).replaceAll(ui.draggable);

                currentList = $('#sortable > li').map(function (i, el) { return $(el).attr('data-value'); });

                if (isSorted(currentList))

                    $('#actualImageBox').empty().html($('#gameOver').html());

                imagePuzzle.enableSwapping(this);

                imagePuzzle.enableSwapping($dragElem);

            }

        });

    },

    setImage: function (images, gridSize) {

        console.log(gridSize);

        gridSize = gridSize || 4; // If gridSize is null or not passed, default it as 4.

        console.log(gridSize);

        var percentage = 100 / (gridSize - 1);

        var image = images[Math.floor(Math.random() * images.length)];

        $('#imgTitle').html(image.title);

        $('#actualImage').attr('src', image.src);

        $('#sortable').empty();

        for (var i = 0; i < gridSize * gridSize; i++) {

            var xpos = (percentage * (i % gridSize)) + '%';

            var ypos = (percentage * Math.floor(i / gridSize)) + '%';

            var li = $('<li class="item" data-value="' + (i) + '"></li>').css({

                'background-image': 'url(' + image.src + ')',

                'background-size': (gridSize * 100) + '%',

                'background-position': xpos + ' ' + ypos,

                'width': 400 / gridSize,

                'height': 400 / gridSize

            });

            $('#sortable').append(li);

        }

        $('#sortable').randomize();

    }

};

function isSorted(arr) {

    for (var i = 0; i < arr.length - 1; i++) {

        if (arr[i] != i)

            return false;

    }

    return true;

}

$.fn.randomize = function (selector) {

    var $elems = selector ? $(this).find(selector) : $(this).children(),

        $parents = $elems.parent();

    $parents.each(function () {

        $(this).children(selector).sort(function () {

            return Math.round(Math.random()) - 0.5;

        }).remove().appendTo(this);

    });

    return this;

};
